#include <cstdint>
#include "Memory.h"

extern "C" auto decrypt_client_info(uint64_t imageBase, uint64_t peb) -> uint64_t {
    uint64_t RAX = imageBase, RBX = imageBase, RCX = imageBase, RDX = imageBase, R8 = imageBase, RDI = imageBase, RSI = imageBase, R9 = imageBase, R10 = imageBase, R11 = imageBase, R12 = imageBase, R13 = imageBase, R14 = imageBase, R15 = imageBase;

    RBX = readMemory<uint64_t>(imageBase + 0x17219218);
    if(RBX == 0) {
        return 0;
    }
    RCX = peb; // mov rcx,gs:[rax]
    RCX = ~RCX;
    RDX = 0x6D70CEFD9593A4F9;
    RAX = 0x0;
    RAX = _rotl64(RAX, 0x10);
    RAX ^= readMemory<uint64_t>(imageBase + 0x660310D);
    RAX = _byteswap_uint64(RAX);
    RBX *= readMemory<uint64_t>(RAX + 0x17);
    RAX = RBX;
    RAX >>= 0x24;
    RBX ^= RAX;
    RAX = 0x3938DE18C6D75C93;
    RBX *= RDX;
    RBX += RAX;
    RBX ^= RCX;
    RBX ^= R8;
    return RBX;

}

extern "C" auto decrypt_client_base(uint64_t clientInfo, uint64_t imageBase, uint64_t peb) -> uint64_t {
    uint64_t RAX = imageBase, RBX = imageBase, RCX = imageBase, RDX = imageBase, R8 = imageBase, RDI = imageBase, RSI = imageBase, R9 = imageBase, R10 = imageBase, R11 = imageBase, R12 = imageBase, R13 = imageBase, R14 = imageBase, R15 = imageBase, RBP = 0, RSP = 0;

    RAX = readMemory<uint64_t>(clientInfo + 0x9DBF8);
    RBX = peb; // mov rbx,gs:[rcx]
// test rax,rax
// je 00007FF713453D55h
    RCX = RBX;
    RCX >>= 0xF;
    RCX &= 0xF;
// cmp rcx,0Eh
// ja 00007FF7134538FBh
    switch(RCX) {
        case 0: {
            R14 = imageBase + 0x3C431634;
            R10 = readMemory<uint64_t>(imageBase + 0x6603146);
            RCX = 0x2C52EE7E5CA1CE96;
            RAX -= RCX;
            RCX = 0x0;
            RCX = _rotl64(RCX, 0x10);
            RCX ^= R10;
            RCX = ~RCX;
            RAX *= readMemory<uint64_t>(RCX + 0x9);
            RCX = RBX;
            RCX ^= R14;
            RAX -= RCX;
            RAX += RBX;
            RCX = RAX;
            RCX >>= 0x14;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x28;
            RAX ^= RCX;
            RAX += RBX;
            RCX = 0x9C83A6ED81709013;
            RAX *= RCX;
            RCX = 0x709DC8ADED0BA319;
            RAX += RCX;
            return RAX;
        }
        case 1: {
            R9 = readMemory<uint64_t>(imageBase + 0x6603146);
            RCX = 0x1A69AD46E3A25C75;
            RAX -= RCX;
            RCX = RAX;
            RCX >>= 0xC;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x18;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x30;
            RCX ^= RBX;
            RAX ^= RCX;
            RCX = 0x6ECEBD9C03D02936;
            RAX -= RCX;
            RCX = imageBase;
            RAX += RCX;
            RCX = 0x0;
            RCX = _rotl64(RCX, 0x10);
            RCX ^= R9;
            RCX = ~RCX;
            RCX = readMemory<uint64_t>(RCX + 0x9);
            RBP = 0x3CE1F452114BE5D;
            RCX *= RBP;
            RAX *= RCX;
            RAX += RBX;
            return RAX;
        }
        case 2: {
            R11 = imageBase + 0xAE07;
            RDX = readMemory<uint64_t>(imageBase + 0x6603146);
            RAX += RBX;
            RCX = RAX;
            RCX >>= 0x13;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x26;
            RAX ^= RCX;
            RCX = 0x337FEE03C131D861;
            RAX ^= RCX;
            RCX = 0xBCA9BFAF51DA6757;
            RAX *= RCX;
            RCX = 0x5434E82D28CC28F9;
            RAX -= RCX;
            RCX = 0x0;
            RCX = _rotl64(RCX, 0x10);
            RCX ^= RDX;
            RCX = ~RCX;
            RAX *= readMemory<uint64_t>(RCX + 0x9);
            RCX = imageBase;
            RAX -= RCX;
            RAX += 0xFFFFFFFFE2253F2C;
            RAX += RBX;
            RCX = R11;
            RCX = ~RCX;
            RCX += RBX;
            RAX ^= RCX;
            return RAX;
        }
        case 3: {
            R10 = readMemory<uint64_t>(imageBase + 0x6603146);
            R15 = imageBase + 0x576A2168;
            RCX = 0x0;
            RCX = _rotl64(RCX, 0x10);
            RCX ^= R10;
            RCX = ~RCX;
            RCX = readMemory<uint64_t>(RCX + 0x9);
            RSP = 0x8035B07E6320667D;
            RCX *= RSP;
            RAX *= RCX;
            RCX = RBX;
            RCX *= R15;
            RCX ^= RBX;
            RAX ^= RCX;
            RCX = imageBase;
            RAX -= RBX;
            RAX -= RCX;
            RAX -= 0x31E8;
            RCX = RAX;
            RCX >>= 0x1;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x2;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x4;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x8;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x10;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x20;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x4;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x8;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x10;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x20;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x1E;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x3C;
            RAX ^= RCX;
            return RAX;
        }
        case 4: {
            R9 = readMemory<uint64_t>(imageBase + 0x6603146);
            RCX = imageBase;
            RCX += 0x281F;
            RCX += RBX;
            RAX ^= RCX;
            RCX = 0xDF286BBF83F616D1;
            RAX *= RCX;
            RCX = RAX;
            RCX >>= 0x8;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x10;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x20;
            RAX ^= RCX;
            RCX = imageBase;
            RAX ^= RCX;
            RAX -= RCX;
            RAX += 0xFFFFFFFFE4385B97;
            RAX += RBX;
            RCX = 0x0;
            RCX = _rotl64(RCX, 0x10);
            RCX ^= R9;
            RCX = ~RCX;
            RAX *= readMemory<uint64_t>(RCX + 0x9);
            RCX = 0x4A4FFCF706C23293;
            RAX -= RCX;
            RCX = RAX;
            RCX >>= 0x22;
            RAX ^= RCX;
            return RAX;
        }
        case 5: {
            R10 = readMemory<uint64_t>(imageBase + 0x6603146);
            RCX = imageBase + 0x9128;
            RCX -= RBX;
            RAX += RCX;
            RCX = RAX;
            RCX >>= 0x26;
            RDX = 0x0;
            RCX ^= RAX;
            RDX = _rotl64(RDX, 0x10);
            RCX -= RBX;
            RDX ^= R10;
            RDX = ~RDX;
            RAX = readMemory<uint64_t>(RDX + 0x9);
            RAX *= RCX;
            RCX = 0x347EE6669F93372E;
            RAX -= RCX;
            RCX = 0xCC4AC21D5E07EAFD;
            RAX *= RCX;
            RCX = imageBase;
            RAX -= RCX;
            RAX += 0xFFFFFFFFC0A98326;
            RAX += RBX;
            RCX = 0x25D8C69821A4B1C1;
            RAX *= RCX;
            return RAX;
        }
        case 6: {
            R10 = readMemory<uint64_t>(imageBase + 0x6603146);
            RCX = imageBase;
            RAX -= RCX;
            RAX += 0xFFFFFFFFFFFF0A85;
            RAX += RBX;
            RCX = 0xDD3029A8BCE8D4D;
            RAX *= RCX;
            RDX = 0x0;
            RDX = _rotl64(RDX, 0x10);
            RCX = 0xFCFBF307C71E86A5;
            RAX ^= RCX;
            RDX ^= R10;
            RCX = imageBase;
            RDX = ~RDX;
            RAX -= RCX;
            RCX = RBX + 18446744073709487871;
            RCX += RAX;
            RAX = imageBase + 0x48A8C848;
            RAX = ~RAX;
            RAX *= RBX;
            RCX ^= RAX;
            RAX = readMemory<uint64_t>(RDX + 0x9);
            RAX *= RCX;
            RCX = RAX;
            RCX >>= 0x24;
            RAX ^= RCX;
            RCX = 0x2F5690490931B637;
            RAX *= RCX;
            return RAX;
        }
        case 7: {
            R14 = imageBase + 0x2491D7D9;
            R9 = readMemory<uint64_t>(imageBase + 0x6603146);
            RCX = 0x635E4B2FC3D0A10D;
            RAX *= RCX;
            RCX = R14;
            RCX = ~RCX;
            RCX ^= RBX;
            RAX += RCX;
            RCX = 0x51256D5DC16562EC;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x6;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0xC;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x18;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x30;
            RAX ^= RCX;
            RCX = RBX;
            RSP = imageBase + 0x5E98C991;
            RCX *= RSP;
            RAX += RCX;
            RCX = imageBase;
            RAX -= RCX;
            RCX = RAX;
            RCX >>= 0xC;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x18;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x30;
            RAX ^= RCX;
            RCX = 0x0;
            RCX = _rotl64(RCX, 0x10);
            RCX ^= R9;
            RCX = ~RCX;
            RAX *= readMemory<uint64_t>(RCX + 0x9);
            return RAX;
        }
        case 8: {
            R10 = readMemory<uint64_t>(imageBase + 0x6603146);
            RDX = 0x0;
            RDX = _rotl64(RDX, 0x10);
            RDX ^= R10;
            RCX = 0xF9180DCDF5F228B4;
            RCX += RAX;
            RDX = ~RDX;
            RAX = readMemory<uint64_t>(RDX + 0x9);
            RAX *= RCX;
            RAX += RBX;
            RCX = RAX;
            RCX >>= 0x5;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0xA;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x14;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x28;
            RAX ^= RCX;
            RCX = imageBase;
            RAX ^= RCX;
            RCX = 0xEE1131A827DCAA68;
            RAX -= RBX;
            RAX ^= RCX;
            RCX = 0xB6B2FC7C21D1D489;
            RAX *= RCX;
            return RAX;
        }
        case 9: {
            R15 = imageBase + 0x74E0B964;
            R10 = readMemory<uint64_t>(imageBase + 0x6603146);
            RAX += RBX;
            RCX = imageBase + 0x2E0E6E37;
            RAX += RCX;
            RCX = 0xFA547910F03B3987;
            RAX *= RCX;
            RCX = imageBase + 0x91DC;
            RCX = ~RCX;
            RCX *= RBX;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x2;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x4;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x8;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x10;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x20;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0xB;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x16;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x2C;
            RAX ^= RCX;
            RCX = imageBase;
            RAX ^= RCX;
            RCX = 0x0;
            RCX = _rotl64(RCX, 0x10);
            RCX ^= R10;
            RCX = ~RCX;
            RAX *= readMemory<uint64_t>(RCX + 0x9);
            RCX = R15;
            RCX = ~RCX;
            RCX ^= RBX;
            RAX += RCX;
            return RAX;
        }
        case 10: {
            R10 = readMemory<uint64_t>(imageBase + 0x6603146);
            RCX = RAX;
            RCX >>= 0x1B;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x36;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x22;
            RCX ^= RBX;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x15;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x2A;
            RAX ^= RCX;
            RCX = 0x0;
            RCX = _rotl64(RCX, 0x10);
            RCX ^= R10;
            RCX = ~RCX;
            RAX *= readMemory<uint64_t>(RCX + 0x9);
            RCX = 0x5D93FBAC7F625877;
            RAX *= RCX;
            RCX = 0x52B757443CDBD28B;
            RAX += RCX;
            RCX = 0x5E17A54EAA80B6A5;
            RAX *= RCX;
            return RAX;
        }
        case 11: {
            R10 = readMemory<uint64_t>(imageBase + 0x6603146);
            RCX = 0x4041D2698092818B;
            RAX *= RCX;
            RCX = 0x6E7B1B11ABDFF2FA;
            RAX ^= RCX;
            RDX = 0x0;
            RDX = _rotl64(RDX, 0x10);
            RCX = RBX + RAX;
            RDX ^= R10;
            RDX = ~RDX;
            RAX = readMemory<uint64_t>(RDX + 0x9);
            RAX *= RCX;
            RCX = RAX;
            RCX >>= 0x14;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x28;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x6;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0xC;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x18;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x30;
            RAX ^= RCX;
            RCX = 0x40077D00487E24C2;
            RAX += RCX;
            RAX -= RBX;
            return RAX;
        }
        case 12: {
            R9 = readMemory<uint64_t>(imageBase + 0x6603146);
            R11 = imageBase + 0x1263;
            RCX = 0xA8101149FD4CA7C3;
            RAX *= RCX;
            R15 = 0x4EC0B4781CB32BBF;
            RCX = RBX;
            RCX = ~RCX;
            RCX *= R11;
            RCX += R15;
            RAX += RCX;
            RCX = 0x0;
            RCX = _rotl64(RCX, 0x10);
            RCX ^= R9;
            RCX = ~RCX;
            RAX *= readMemory<uint64_t>(RCX + 0x9);
            RCX = RAX;
            RCX >>= 0x1E;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x3C;
            RAX ^= RCX;
            RAX ^= RBX;
            RCX = 0x4E80F1A0C98C468;
            RAX += RCX;
            RAX -= RBX;
            return RAX;
        }
        case 13: {
            R10 = readMemory<uint64_t>(imageBase + 0x6603146);
            R11 = imageBase + 0x6267F8D9;
            RCX = 0x0;
            RCX = _rotl64(RCX, 0x10);
            RCX ^= R10;
            RCX = ~RCX;
            RCX = readMemory<uint64_t>(RCX + 0x9);
            RAX *= RCX;
            RCX = 0x87FBBF81F585A7F5;
            RAX *= RCX;
            RCX = imageBase;
            RAX += RCX;
            RCX = RBX + RAX;
            RAX = 0xE2DF381128AD7D;
            RCX ^= RAX;
            RAX = RCX;
            RAX >>= 0x15;
            RCX ^= RAX;
            RAX = RCX;
            RAX >>= 0x2A;
            RAX ^= RCX;
            RCX = R11;
            RCX = ~RCX;
            RAX -= RBX;
            RAX += RCX;
            RCX = imageBase;
            RAX -= RCX;
            return RAX;
        }
        case 14: {
            R11 = readMemory<uint64_t>(imageBase + 0x6603146);
            RDX = imageBase + 0xB8FD;
            RCX = RBX;
            RCX *= RDX;
            R8 = 0x0;
            R8 = _rotl64(R8, 0x10);
            R8 ^= R11;
            RDX = RAX + RCX;
            R8 = ~R8;
            RAX = imageBase + 0x3DA2C48A;
            RDX += RAX;
            RAX = readMemory<uint64_t>(R8 + 0x9);
            RAX *= RDX;
            RCX = RAX;
            RCX >>= 0x15;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x2A;
            RAX ^= RCX;
            RCX = 0x63F739E7ACE8DEFA;
            RAX -= RCX;
            RCX = 0xECA41A7D230C65B;
            RAX *= RCX;
            return RAX;
        }
        case 15: {
            R15 = imageBase + 0x4A2;
            R10 = readMemory<uint64_t>(imageBase + 0x6603146);
            RCX = imageBase;
            RAX -= RCX;
            RCX = RAX;
            RCX >>= 0x15;
            RAX ^= RCX;
            RCX = RAX;
            RCX >>= 0x2A;
            RDX = 0x0;
            RCX ^= RAX;
            RDX = _rotl64(RDX, 0x10);
            RDX ^= R10;
            RDX = ~RDX;
            RAX = readMemory<uint64_t>(RDX + 0x9);
            RAX *= RCX;
            RAX += RBX;
            RCX = 0xC3EBCF9689C9BEB;
            RAX *= RCX;
            RCX = 0x7631FAD984D70CD9;
            RAX *= RCX;
            RCX = 0x2D351ADE4F41F93F;
            RAX += RCX;
            RAX ^= RBX;
            RAX ^= R15;
            return RAX;
        }
    }

}

